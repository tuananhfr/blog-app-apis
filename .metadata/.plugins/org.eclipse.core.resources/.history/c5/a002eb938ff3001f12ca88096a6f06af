package com.tuananhfr.blog.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
	
	
	//private Logger logger = LoggerFactory.getLogger(OncePerRequestFilter.class);
	@Autowired
	private UserDetailsService userDetailsService;
	@Autowired
	private JwtTokenHelper jwtTokenHelper;

    

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {

	    String requestHeader = request.getHeader("Authorization");
	    System.out.println("Authorization Header reçu : " + requestHeader);

	    String username = null;
	    String token = null;

	    if (requestHeader != null && requestHeader.startsWith("Bearer ")) {
	        token = requestHeader.substring(7);
	        System.out.println("Token extrait : " + token);

	        try {
	            username = this.jwtTokenHelper.getUsernameFromToken(token);
	            System.out.println("Username extrait : " + username);
	        } catch (Exception e) {
	            System.out.println("Erreur lors de l'extraction du token : " + e.getMessage());
	        }
	    } else {
	        System.out.println("Header invalide ou absent");
	    }

	    if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
	        UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);
	        Boolean validateToken = this.jwtTokenHelper.validateToken(token, userDetails);

	        if (validateToken) {
	            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
	                    userDetails, null, userDetails.getAuthorities());
	            authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
	            SecurityContextHolder.getContext().setAuthentication(authentication);
	            System.out.println("Utilisateur authentifié : " + username);
	        } else {
	            System.out.println("Token invalide !");
	        }
	    }

	    filterChain.doFilter(request, response);
	}

	
	
}
